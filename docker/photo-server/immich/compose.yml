services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:v1.120.0
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - ./healthcheck.js:/healthcheck/healthcheck.js
    labels:
      - traefik.enable=true
      - traefik.http.routers.photos.entrypoints=websecure
      - traefik.http.routers.photos.rule=Host(`photos.jstockley.com`)
      - traefik.http.routers.photos.tls=true
      - traefik.http.routers.photos.tls.certresolver=production
      - traefik.http.routers.photos.service=photos
      - traefik.http.services.photos.loadbalancer.server.port=2283
      - traefik.docker.network=immich
    env_file:
      - .env
    depends_on:
      - redis
      - database
    restart: unless-stopped
    #healthcheck:
    #  disable: true
    healthcheck:
      test: [ "CMD", "node", "/healthcheck/healthcheck.js" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 100s
    networks:
      - immich
      - immich_private

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:v1.119.1
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "bash", "-c", "exec 5<>/dev/tcp/127.0.0.1/3003" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 100s
    networks:
      - immich_private

  redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 100s
    restart: unless-stopped
    networks:
      - immich_private

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 100s
    command: ["postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    restart: unless-stopped
    networks:
      - immich_private

volumes:
  model-cache:

networks:
  immich:
    name: immich
    external: true
  immich_private:
    name: immich_private
