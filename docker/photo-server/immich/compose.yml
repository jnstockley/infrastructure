---
name: immich
services:
  database:
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    container_name: immich_postgres
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    networks:
      - immich_private
    command:
      [
        "postgres",
        "-c",
        "shared_preload_libraries=vectors.so",
        "-c",
        'search_path="$$user", public, vectors',
        "-c",
        "logging_collector=on",
        "-c",
        "max_wal_size=2GB",
        "-c",
        "shared_buffers=512MB",
        "-c",
        "wal_compression=on"
      ]
    restart: unless-stopped
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' ||
        exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}'
        --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT
        COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo
        "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 100s
    logging:
      driver: loki
      options:
        loki-url: "https://loki.local.jstockley.com/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: 800ms
        loki-timeout: 1s
        keep-file: "true"
        mode: "non-blocking"
    deploy:
      resources:
        limits:
          memory: 256M
    security_opt:
      - no-new-privileges:true

  immich-machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:v1.130.3
    container_name: immich_machine_learning
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    networks:
      - immich_private
      - redis
    restart: unless-stopped
    healthcheck:
      test: python3 healthcheck.py
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 100s
    logging:
      driver: loki
      options:
        loki-url: "https://loki.local.jstockley.com/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: 800ms
        loki-timeout: 1s
        keep-file: "true"
        mode: "non-blocking"
    deploy:
      resources:
        limits:
          memory: 512M
    security_opt:
      - no-new-privileges:true

  immich-server:
    image: ghcr.io/immich-app/immich-server:v1.130.3
    container_name: immich_server
    depends_on:
      - database
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - ./healthcheck.js:/healthcheck/healthcheck.js
    env_file:
      - .env
    ports:
      - '0.0.0.0:2283:2283'
    networks:
      - immich
      - immich_private
      - redis
    restart: unless-stopped
    healthcheck:
      test: immich-healthcheck
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 100s
    logging:
      driver: loki
      options:
        loki-url: "https://loki.local.jstockley.com/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: 800ms
        loki-timeout: 1s
        keep-file: "true"
        mode: "non-blocking"
    labels:
      - traefik.enable=true
      - traefik.http.routers.photos.entrypoints=websecure
      - traefik.http.routers.photos.rule=Host(`photos.jstockley.com`)
      - traefik.http.routers.photos.tls=true
      - traefik.http.routers.photos.tls.certresolver=production
      - traefik.http.routers.photos.service=photos
      - traefik.http.services.photos.loadbalancer.server.port=2283
      - traefik.docker.network=immich
    deploy:
      resources:
        limits:
          memory: 1G
    security_opt:
      - no-new-privileges:true

networks:
  immich:
    name: immich
    external: true
  immich_private:
    name: immich_private
    external: true
  redis:
    name: redis
    external: true

volumes:
  model-cache:
