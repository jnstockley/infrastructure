---
name: Docker Deploy

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - docker/racknerd/**/compose.yml
      - docker/photo-server/**/compose.yml

jobs:
  deploy:
    name: Deploy new Docker Container
    runs-on: ubuntu-latest

    steps:
      - name: Step 1 - Set Timezone
        run: sudo timedatectl set-timezone America/Chicago

      - name: Step 1 - Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Step 2 - Get changed files between branches
        id: changed-files
        run: |
          # For pull requests, compare base branch (target) with head branch (source)
          BASE_BRANCH="${{ github.base_ref }}"
          HEAD_BRANCH="${{ github.head_ref }}"

          echo "Comparing changes between '$BASE_BRANCH' and '$HEAD_BRANCH'..."

          # Ensure branches exist in local git
          git fetch origin $BASE_BRANCH:$BASE_BRANCH || echo "Could not fetch base branch"
          git fetch origin $HEAD_BRANCH:$HEAD_BRANCH || echo "Could not fetch head branch"

          # Get the most recent commit SHA from each branch
          BASE_SHA=$(git rev-parse origin/$BASE_BRANCH 2>/dev/null || git rev-parse $BASE_BRANCH 2>/dev/null || echo "")
          HEAD_SHA=$(git rev-parse HEAD)

          if [ -z "$BASE_SHA" ]; then
            echo "Warning: Could not find base branch '$BASE_BRANCH'. Using default branch."
            BASE_SHA=$(git rev-parse origin/beta 2>/dev/null || git rev-parse origin/main 2>/dev/null || git rev-parse origin/master)
          fi

          echo "Base branch commit: $BASE_SHA"
          echo "Head branch commit: $HEAD_SHA"

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA --)

          # Filter for Docker compose files if needed
          RACKNERD_FILES=$(echo "$CHANGED_FILES" | grep -E 'docker/(photo-server)/.*/compose\.yml' || echo "")
          PHOTO_SERVER_FILES=$(echo "$CHANGED_FILES" | grep -E 'docker/(photo-server)/.*/compose\.yml' || echo "")

          echo "RACKNERD_FILES<<EOF" >> $GITHUB_ENV
          echo "RACKNERD_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "PHOTO_SERVER_FILES<<EOF" >> $GITHUB_ENV
          echo "RACKNERD_FILESPHOTO_SERVER_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Docker compose files:"
          echo "RACKNERD_FILES"
          echo "PHOTO_SERVER_FILES"

      - name: Step 3 - Deploy containers (Racknerd)
        if: steps.files.outputs.docker_racknerd_any_changed == 'true'
        uses: appleboy/ssh-action@v1.2.2
        env:
          FILES: ${{ steps.files.outputs.docker_racknerd_all_changed_files }}
        with:
          host: ${{ secrets.RACKNERD_IP }}
          username: jackstockley
          key: ${{ secrets.RACKNERD_SSH_KEY }}
          passphrase: ${{ secrets.RACKNERD_SSH_PASSWORD }}
          envs: RACKNERD_FILES
          script: |
            echo "Deploying Racknerd containers"
            cd ~/infrastructure/
            git reset --hard origin/main
            git pull
            for file in ${RACKNERD_FILES}; do
              echo "Deploying $file"
              docker compose -f $file up -d --force-recreate --remove-orphans
            done
            docker image prune -a -f
            docker system prune -f

      - name: Step 4 - WireGuard Connection
        if: steps.files.outputs.docker_photo_server_any_changed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf
          echo "${{ secrets.IOWA_HOME_VPN_CONF }}" > wg0.conf
          echo "${{ secrets.CHICAGO_HOME_VPN_CONF }}" > wg1.conf
          sudo chmod 600 wg0.conf
          sudo chmod 600 wg1.conf
          sudo cp wg0.conf /etc/wireguard/
          sudo cp wg1.conf /etc/wireguard/
          sudo wg-quick up wg0
          sudo wg-quick up wg1

      - name: Step 5 - Deploy containers (Photo Server)
        if: steps.files.outputs.docker_photo_server_any_changed == 'true'
        uses: appleboy/ssh-action@v1.2.2
        env:
          FILES: ${{ steps.files.outputs.docker_photo_server_all_changed_files }}
        with:
          host: photo-server.local.jstockley.com
          username: jackstockley
          key: ${{ secrets.PHOTO_SERVER_SSH_KEY }}
          passphrase: ${{ secrets.PHOTO_SERVER_SSH_PASSWORD }}
          envs: PHOTO_SERVER_FILES
          script: |
            echo "Deploying Photo Server containers"
            cd ~/infrastructure/
            git reset --hard origin/main
            git pull
            for file in ${PHOTO_SERVER_FILES}; do
              echo "Deploying $file"
              docker compose -f $file up -d --force-recreate --remove-orphans
            done
            docker image prune -a -f
            docker system prune -f
