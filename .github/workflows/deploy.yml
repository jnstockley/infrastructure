---
name: Docker Deploy

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - docker/racknerd/**/compose.yml
      - docker/photo-server/**/compose.yml

jobs:
  get_changed_files:
    name: Get changed files
    runs-on: ubuntu-latest
    steps:
      - name: Step 1 - Set Timezone
        run: sudo timedatectl set-timezone America/Chicago

      - name: Step 2 - Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Step 3 - Get changed files between branches
        id: changed-files
        run: |
          # For pull requests, compare base branch (target) with head branch (source)
          BASE_BRANCH="${{ github.base_ref }}"
          HEAD_BRANCH="${{ github.head_ref }}"

          echo "Comparing changes between '$BASE_BRANCH' and '$HEAD_BRANCH'..."

          # Ensure branches exist in local git
          git fetch origin $BASE_BRANCH:$BASE_BRANCH || echo "Could not fetch base branch"
          git fetch origin $HEAD_BRANCH:$HEAD_BRANCH || echo "Could not fetch head branch"

          # Get the most recent commit SHA from each branch
          BASE_SHA=$(git rev-parse origin/$BASE_BRANCH 2>/dev/null || git rev-parse $BASE_BRANCH 2>/dev/null || echo "")
          HEAD_SHA=$(git rev-parse HEAD)

          if [ -z "$BASE_SHA" ]; then
            echo "Warning: Could not find base branch '$BASE_BRANCH'. Using default branch."
            BASE_SHA=$(git rev-parse origin/beta 2>/dev/null || git rev-parse origin/main 2>/dev/null || git rev-parse origin/master)
          fi

          echo "Base branch commit: $BASE_SHA"
          echo "Head branch commit: $HEAD_SHA"

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA --)

          # Filter for Docker compose files if needed
          RACKNERD_FILES=$(echo "$CHANGED_FILES" | grep -E 'docker/racknerd/.*/compose\.yml' || echo "")
          PHOTO_SERVER_FILES=$(echo "$CHANGED_FILES" | grep -E 'docker/photo-server/.*/compose\.yml' || echo "")

          echo "RACKNERD_FILES<<EOF" >> $GITHUB_ENV
          echo "RACKNERD_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "PHOTO_SERVER_FILES<<EOF" >> $GITHUB_ENV
          echo "PHOTO_SERVER_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Docker compose files:"
          echo "RACKNERD_FILES"
          echo "PHOTO_SERVER_FILES"

  racknerd_deploy:
    name: Deploy new Docker Container to Racknerd
    runs-on: ubuntu-latest
    environment: racknerd
    needs: get_changed_files
    if: RACKNERD_FILES != ''
    steps:
      - name: Set up SSH and deploy to Photo Server
        env:
          SSH_HOST: ${{ secrets.IP }}
          SSH_USER: jackstockley
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSWORD }}
          SSH_COMMANDS: |
            cd ~/infrastructure/
            git reset --hard origin/main
            git pull
            for file in ${PHOTO_SERVER_FILES}; do
              echo "Deploying $file"
              docker compose -f $file up -d --force-recreate --remove-orphans
            done
            docker image prune -a -f
            docker system prune -f
        run: |
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write SSH key to file
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Create SSH config to avoid host key verification
          cat > ~/.ssh/config << EOF
          Host *
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config

          # Install expect for handling SSH passphrase
          sudo apt-get update && sudo apt-get install -y expect

          # Use expect script for handling passphrase
          cat > /tmp/ssh_script.exp << EOF
          #!/usr/bin/expect -f
          set timeout -1
          spawn ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "$SSH_COMMANDS"
          expect "Enter passphrase for key"
          send "$SSH_PASSPHRASE\r"
          expect eof
          EOF
          chmod +x /tmp/ssh_script.exp

          # Execute expect script
          /tmp/ssh_script.exp

          # Clean up
          rm -f ~/.ssh/id_rsa /tmp/ssh_script.exp

  photo_server_deploy:
    name: Deploy new Docker Container to Photo Server
    runs-on: ubuntu-latest
    environment: photo-server
    needs: get_changed_files
    if: PHOTO_SERVER_FILES != ''
    steps:
      - name: WireGuard Connection
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf
          echo "${{ secrets.VPN }}" > wg0.conf
          sudo chmod 600 wg0.conf
          sudo cp wg0.conf /etc/wireguard/
          sudo wg-quick up wg0

      - name: Set up SSH and deploy to Photo Server
        env:
          SSH_HOST: photo-server.local.jstockley.com
          SSH_USER: jackstockley
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSWORD }}
          SSH_COMMANDS: |
            cd ~/infrastructure/
            git reset --hard origin/main
            git pull
            for file in ${PHOTO_SERVER_FILES}; do
              echo "Deploying $file"
              docker compose -f $file up -d --force-recreate --remove-orphans
            done
            docker image prune -a -f
            docker system prune -f
        run: |
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write SSH key to file
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Create SSH config to avoid host key verification
          cat > ~/.ssh/config << EOF
          Host *
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config

          # Install expect for handling SSH passphrase
          sudo apt-get update && sudo apt-get install -y expect

          # Use expect script for handling passphrase
          cat > /tmp/ssh_script.exp << EOF
          #!/usr/bin/expect -f
          set timeout -1
          spawn ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "$SSH_COMMANDS"
          expect "Enter passphrase for key"
          send "$SSH_PASSPHRASE\r"
          expect eof
          EOF
          chmod +x /tmp/ssh_script.exp

          # Execute expect script
          /tmp/ssh_script.exp

          # Clean up
          rm -f ~/.ssh/id_rsa /tmp/ssh_script.exp
